{"version":3,"sources":["components/TodoItem.js","components/TodoApp.js","App.js","index.js"],"names":["TodoItem","props","todo","handleDelete","handleToggle","Table","Row","positive","completed","Cell","Checkbox","checked","onChange","title","Button","color","icon","floated","compact","size","onClick","headers","TodoApp","state","todos","newTodo","fetchTodos","fetch","then","data","json","setState","catch","err","console","error","handleToggleAll","allToggled","Promise","all","map","id","method","body","JSON","stringify","handleInputChange","event","value","target","handleNewTodoKeyDown","length","keyCode","preventDefault","trim","handleClearCompleted","completedTodos","filter","this","every","className","placeholder","autoFocus","onKeyDown","htmlFor","style","display","Header","HeaderCell","Body","i","key","handleToDoClick","Footer","fullWidth","colSpan","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c8092a7c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Table, Checkbox, Button } from 'semantic-ui-react';\r\n\r\nexport const TodoItem = props => {\r\n  const { todo, handleDelete, handleToggle } = props\r\n  return (\r\n    <Table.Row  positive={todo.completed}>\r\n     <Table.Cell>\r\n      <Checkbox checked={todo.completed}\r\n      onChange={ handleToggle }\r\n       />\r\n </Table.Cell>\r\n <Table.Cell>\r\n  {todo.title}\r\n  <Button\r\n   color='red'\r\n   icon='trash'\r\n   floated='right'\r\n   compact\r\n   size='small'\r\n   onClick={ handleDelete }\r\n  />\r\n </Table.Cell>\r\n</Table.Row>\r\n)}\r\n\r\nexport default TodoItem\r\n","import React, { Component } from 'react';\r\nimport { Table, Checkbox, Button } from 'semantic-ui-react';\r\nimport TodoItem from './TodoItem';\r\n\r\nconst headers = {\r\n  'Content-Type': 'application/json',\r\n}\r\n\r\nclass TodoApp extends Component {\r\n  state = {\r\n  todos:  [],\r\nnewTodo: '',\r\n  }\r\n\r\n componentDidMount() {\r\nthis.fetchTodos()\r\n}\r\n\r\nfetchTodos = () => {\r\n  fetch('/todos')\r\n  .then(data => data.json())\r\n  .then(todos => this.setState({ todos }))\r\n  .catch(err => console.error({ err }))\r\n}\r\n\r\nhandleToggleAll = allToggled  => {\r\n const { todos } = this.state\r\n Promise.all(\r\n     todos.map(todo =>\r\n     fetch(`/todos/${todo.id}`, {\r\n       method: 'PATCH',\r\n       headers,\r\n       body: JSON.stringify({ completed: !allToggled }),\r\n     }),\r\n   ),\r\n ).then(this.fetchTodos)\r\n}\r\n\r\nhandleToDoClick(todo) {\r\nconst {id, completed } = todo\r\nfetch(`/todos/${id}`, {\r\n  method: 'PATCH',\r\n  headers,\r\n  body: JSON.stringify({ completed: !completed }),\r\n}).then(this.fetchTodos)\r\n\r\n}\r\n\r\nhandleInputChange = event => {\r\n    const value = event.target.value\r\n     this.setState({ newTodo: value })\r\n   }\r\n\r\nhandleNewTodoKeyDown = event => {\r\n  if(this.state.todos.length >= 10) {\r\n    //don't allow more than 10 todos\r\n    return\r\n  }\r\n  if (event.keyCode !== 13) { //13 is keycode for enter key\r\n    return\r\n  }\r\n  event.preventDefault()\r\n  const { newTodo, todos } = this.state\r\n  const value = newTodo.trim()\r\n  if (value) {\r\n    fetch('/todos',\r\n    { method: 'POST',\r\n     headers,\r\n     body: JSON.stringify({\r\n       title: value,\r\n       completed: false,\r\n     }),\r\n   }).then(this.fetchTodos)\r\n     .then(() => this.setState({ newTodo: '' }))\r\n  }\r\n}\r\n\r\nhandleDelete = id => {\r\n  fetch(`/todos/${id}`, {\r\n    method: 'DELETE',\r\n    headers,\r\n  }).then(this.fetchTodos)\r\n}\r\n\r\nhandleClearCompleted = () => {\r\n  const { todos } = this.state\r\n const completedTodos = todos.filter(\r\n      todo => todo.completed,\r\n    )\r\n  Promise.all(\r\n    completedTodos.map(todo =>\r\n      fetch(`/todos/${todo.id}`, {\r\n      method: 'DELETE',\r\n      headers,\r\n    }),\r\n  ),\r\n).then(this.fetchTodos)\r\n}\r\n\r\n  render(){\r\n    const { todos, newTodo } = this.state\r\n    const allToggled = todos.every(todo => todo.completed)\r\n    return (\r\n    //  <div className=\"app\">\r\n        <div className=\"todo-container\">\r\n          <input id=\"new-todo\"\r\n          className=\"new-todo\"\r\n          placeholder=\"What Needs To Be Done? \"\r\n          autoFocus\r\n          value={this.state.newTodo}\r\n          onChange={ this.handleInputChange }\r\n          onKeyDown={this.handleNewTodoKeyDown}\r\n\r\n          />\r\n          <label\r\n          htmlFor=\"new-todo\"\r\n          style={{ display: 'none' }} > Add New Thing To Do... </label>\r\n         {todos.length === 0 ? ( <div><br/><h1>.....You Have Nothing To Do!</h1></div>\r\n          ) : (\r\n           <Table>\r\n           <Table.Header>\r\n           <Table.Row>\r\n           <Table.HeaderCell>\r\n            <Checkbox\r\n             checked={allToggled}\r\n             onChange={ () =>  this.handleToggleAll(allToggled) }\r\n             />\r\n           </Table.HeaderCell>\r\n           </Table.Row>\r\n           </Table.Header>\r\n           <Table.Body>\r\n\r\n          {this.state.todos.map((todo, i) => (\r\n              <TodoItem\r\n              key={i}\r\n              todo={todo}\r\n              handleToggle={ () => this.handleToDoClick(todo, i) }\r\n              handleDelete={ () =>\r\n               this.handleDelete(todo.id)} />\r\n            ))}\r\n           </Table.Body>\r\n           <Table.Footer fullWidth>\r\n            <Table.Row>\r\n            <Table.HeaderCell colSpan=\"2\">\r\n            <Button\r\n            size=\"small\"\r\n            onClick={this.handleClearCompleted}>Clear Completed</Button>\r\n            </Table.HeaderCell>\r\n            </Table.Row>\r\n           </Table.Footer>\r\n           </Table>\r\n         ) }\r\n          </div>\r\n  )\r\n }\r\n}\r\n\r\nexport default TodoApp;\r\n\r\n/* class TodoApp extends Component {\r\n  state = {\r\n  todos:  [\r\n    {\r\n      \"id\": 0,\r\n      \"title\": \"Plan and Design App\",\r\n      \"completed\": true\r\n    },\r\n    {\r\n      \"id\": 1,\r\n      \"title\": \"Write Code and debug\",\r\n      \"completed\": true\r\n    },\r\n  ],\r\nnewTodo: '',\r\n  }\r\n\r\n\r\n\r\nhandleToggleAll () => {\r\nconst [...todos] = this.state.todos\r\n//  const { todos } = this.state\r\n  const allToggled = todos.every(todo => todo.completed)\r\n//allToggled = todos.every(todo => todo.completed)\r\n  const toggledTodos = todos.map(todo => ({...todo,\r\n    completed: !allToggled\r\n  }))\r\n//  console.log({ toggledTodos })\r\n\r\n  this.setState({ todos: toggledTodos })\r\n}\r\n\r\nhandleToDoClick(todo, index) {\r\nconst { completed } = todo\r\n const [...todos] = this.state.todos\r\n todos[index] = { ...todo, completed: !completed,}\r\n //todos[id] = { ...todo, completed: !completed,}\r\nthis.setState({ todos })\r\n}\r\n\r\nhandleInputChange = event => {\r\n    const value = event.target.value\r\n     this.setState({ newTodo: value })\r\n   }\r\n\r\nhandleNewTodoKeyDown = event => {\r\n  if(this.state.todos.length >= 11) {\r\n    //don't allow more than 11 todos\r\n    return\r\n  }\r\n  if (event.keyCode !== 13) { //13 is keycode for enter key\r\n    return\r\n  }\r\n  event.preventDefault()\r\n  const { newTodo, todos } = this.state\r\n  const value = newTodo.trim()\r\n  if (value) {\r\n    this.setState({\r\n      todos: [\r\n        ...todos, { title: value, completed: false },\r\n    ],\r\n     newTodo: '',\r\n   })\r\n  }\r\n}\r\n\r\nhandleDelete = i => {\r\n  const { todos } = this.state\r\n  const todosWithoutDeletedTodo =todos.filter(\r\n    (t, index) =>  index !== i\r\n  )\r\n  this.setState({ todos: todosWithoutDeletedTodo } )\r\n}\r\n\r\nhandleClearCompleted = () => {\r\n  const { todos } = this.state\r\n/*  const completedTodos = todos.filter(\r\n      todo => todo.completed,\r\n    )\r\n  const inCompleteTodos = todos.filter(\r\n    todo => !todo.completed\r\n  )\r\n  this.setState({ todos: inCompleteTodos })\r\n}\r\n\r\n  render(){\r\n    const { todos, newTodo } = this.state\r\n    const allToggled = todos.every(todo => todo.completed)\r\n    return (\r\n    //  <div className=\"app\">\r\n        <div className=\"todo-container\">\r\n          <input id=\"new-todo\"\r\n          className=\"new-todo\"\r\n          placeholder=\"What Needs To Be Done? \"\r\n          autoFocus\r\n          value={this.state.newTodo}\r\n          onChange={ this.handleInputChange }\r\n          onKeyDown={this.handleNewTodoKeyDown}\r\n\r\n          />\r\n          <label\r\n          htmlFor=\"new-todo\"\r\n          style={{ display: 'none' }} > Add New Thing To Do... </label>\r\n         {todos.length === 0 ? ( <div><br/><h1>.....You Have Nothing To Do!</h1></div>\r\n          ) : (\r\n           <Table>\r\n           <Table.Header>\r\n           <Table.Row>\r\n           <Table.HeaderCell>\r\n            <Checkbox\r\n             checked={allToggled}\r\n             onChange={ this.handleToggleAll }\r\n             />\r\n           </Table.HeaderCell>\r\n           </Table.Row>\r\n           </Table.Header>\r\n           <Table.Body>\r\n\r\n          {this.state.todos.map((todo, i) => (\r\n              <TodoItem\r\n              key={i}\r\n              todo={todo}\r\n              handleToggle={() => this.handleToDoClick(todo, i) }\r\n              handleDelete={() =>\r\n              this.handleDelete(i)} />\r\n              // this.handleDelete(todo.id)} />\r\n            ))}\r\n           </Table.Body>\r\n           <Table.Footer fullWidth>\r\n            <Table.Row>\r\n            <Table.HeaderCell colSpan=\"2\">\r\n            <Button\r\n            size=\"small\"\r\n            onClick={this.handleClearCompleted}>Clear Completed</Button>\r\n            </Table.HeaderCell>\r\n            </Table.Row>\r\n           </Table.Footer>\r\n           </Table> ) }\r\n          </div>\r\n\r\n  )\r\n }\r\n}\r\n\r\nexport default TodoApp;\r\n\r\n*/\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Table, Checkbox, Button } from 'semantic-ui-react';\n\nimport TodoApp from './components/TodoApp';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n      <TodoApp />\n      </div>\n  )\n }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}